
import React, { useState, useRef } from "react";
import MainLayout from "@/layouts/MainLayout";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import KnowledgeGraph from "@/components/KnowledgeGraph";
import { Loader2, ExternalLink, Youtube, AlertTriangle, FileText, Info } from "lucide-react";
import { toast } from "sonner";
import { 
  fetchYoutubeTranscription, 
  fetchYoutubeCaptions, 
  fetchYoutubeApiCaptions, 
  fetchGeminiTranscription,
  fetchSupadataTranscription,
  analyzeTranscription,
  scrapeYoutubePage
} from "@/services/youtubeService";
import { FormattedHistoricalEntity, TranscriptionOptions } from "@/types/supabase";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { supabase } from "@/integrations/supabase/client";
import { Separator } from "@/components/ui/separator";
import TranscriptionMethodSelector from "@/components/TranscriptionMethodSelector";

// Function to fetch YouTube transcription using the Node.js backend
const fetchYoutubeTranscriptionWithNodeBackend = async (videoId, options = {}) => {
  try {
    const { useAutoCaption = true, serverUrl = 'http://localhost:3000' } = options;
    
    console.log(`Fetching transcription from Node backend for video ID: ${videoId}`);
    
    const response = await fetch(`${serverUrl}/api/extract-captions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ videoId, useAutoCaption })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || `Server returned ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data && data.transcription) {
      return {
        transcription: data.transcription,
        language: 'en', // Default assumption
        isAutoGenerated: useAutoCaption
      };
    } else if (data && data.error) {
      throw new Error(`Server error: ${data.error}`);
    }
    
    throw new Error("No transcription data received");
  } catch (error) {
    console.error("Error fetching YouTube transcription from Node backend:", error);
    throw new Error(`Error fetching YouTube transcription: ${error.message}`);
  }
};

const YouTubeAnalysis = () => {
  // States for the YouTube video and analysis
  const [url, setUrl] = useState<string>("");
  const [videoId, setVideoId] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [analyzing, setAnalyzing] = useState<boolean>(false);
  const [transcription, setTranscription] = useState<string>("");
  const [entities, setEntities] = useState<FormattedHistoricalEntity[]>([]);
  const [activeTab, setActiveTab] = useState<"video" | "transcription" | "visualization" | "metadata">("video");
  const [error, setError] = useState<string | null>(null);
  const [transcriptionMethod, setTranscriptionMethod] = useState<"standard" | "alternative" | "api" | "gemini" | "scraping" | "supadata" | "nodeBackend">("supadata");
  const [videoMetadata, setVideoMetadata] = useState<any>(null);
  const [useAutoCaption, setUseAutoCaption] = useState<boolean>(true);
  const [captionInfo, setCaptionInfo] = useState<{language?: string, isAutoGenerated?: boolean}>({});
  const [nodeServerUrl, setNodeServerUrl] = useState<string>("http://localhost:3000");
  const videoContainerRef = useRef<HTMLDivElement>(null);

  // Function to extract video ID from YouTube URL
  const extractVideoId = (url: string): string | null => {
    const regExp = /^.*(youtu.be\/|v\/|e\/|u\/\w+\/|embed\/|v=)([^#&?]*).*/;
    const match = url.match(regExp);
    return match && match[2].length === 11 ? match[2] : null;
  };

  // Handle URL submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    const id = extractVideoId(url);
    if (id) {
      setVideoId(id);
      setTranscription("");
      setEntities([]);
      setVideoMetadata(null);
      setCaptionInfo({});
      setActiveTab("video");
      // Set supadata as the default method
      setTranscriptionMethod("supadata");
      toast.success("YouTube video loaded successfully");
    } else {
      toast.error("Invalid YouTube URL");
      setError("Please enter a valid YouTube URL (e.g., https://www.youtube.com/watch?v=...)");
    }
  };

  // Fetch transcription from YouTube video using Supadata API
  const fetchTranscriptionWithSupadata = async () => {
    if (!videoId) return;
    
    setLoading(true);
    setError(null);
    try {
      const options: TranscriptionOptions = {
        useAutoCaption
      };
      
      const result = await fetchSupadataTranscription(videoId, options);
      
      if (result && result.transcription) {
        setTranscription(result.transcription);
        setCaptionInfo({
          language: result.language,
          isAutoGenerated: result.isAutoGenerated
        });
        setActiveTab("transcription");
        toast.success(`Transcription fetched successfully using Supadata API (${result.isAutoGenerated ? 'Auto-generated' : 'Manual'} captions)`);
      } else {
        throw new Error("No transcription received from Supadata API");
      }
    } catch (error) {
      console.error("Error fetching Supadata transcription:", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      setError(`Failed to fetch transcription with Supadata: ${errorMessage}. Trying alternative methods...`);
      toast.error("Supadata transcription failed: " + errorMessage);
      
      // Try scraping instead
      await fetchTranscriptionWithScraping();
    } finally {
      setLoading(false);
    }
  };
  
  // Fetch transcription from YouTube video using Node.js backend
  const fetchTranscriptionWithNodeBackend = async () => {
    if (!videoId) return;
    
    setLoading(true);
    setError(null);
    try {
      const result = await fetchYoutubeTranscriptionWithNodeBackend(videoId, {
        useAutoCaption,
        serverUrl: nodeServerUrl
      });
      
      if (result && result.transcription) {
        setTranscription(result.transcription);
        setCaptionInfo({
          language: result.language,
          isAutoGenerated: result.isAutoGenerated
        });
        setActiveTab("transcription");
        toast.success(`Transcription fetched successfully using Node.js backend (${result.isAutoGenerated ? 'Auto-generated' : 'Manual'} captions)`);
      } else {
        throw new Error("No transcription received from Node.js backend");
      }
    } catch (error) {
      console.error("Error fetching Node.js backend transcription:", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      setError(`Failed to fetch transcription with Node.js backend: ${errorMessage}. Trying alternative methods...`);
      toast.error("Node.js backend transcription failed: " + errorMessage);
      
      // Try supadata as fallback
      setTranscriptionMethod("supadata");
      await fetchTranscriptionWithSupadata();
    } finally {
      setLoading(false);
    }
  };

  // Fetch transcription from YouTube video using web scraping
  const fetchTranscriptionWithScraping = async () => {
    if (!videoId) return;
    
    setLoading(true);
    setError(null);
    try {
      const scrapedData = await scrapeYoutubePage(videoId, { useAutoCaption });
      
      setVideoMetadata({
        title: scrapedData.title,
        description: scrapedData.description,
        uploadDate: scrapedData.uploadDate,
        viewCount: scrapedData.viewCount,
        channelName: scrapedData.channelName,
        channelId: scrapedData.channelId,
        captionTracks: scrapedData.captionTracks,
        language: scrapedData.language,
        isAutoGenerated: scrapedData.isAutoGenerated
      });
      
      setCaptionInfo({
        language: scrapedData.language,
        isAutoGenerated: scrapedData.isAutoGenerated
      });
      
      let transcriptionText = "";
      
      // If we have direct transcription data
      if (scrapedData.transcription && scrapedData.transcription.length > 0) {
        transcriptionText = scrapedData.transcription;
      } 
      // If we have caption tracks, show information about them
      else if (scrapedData.captionTracks && scrapedData.captionTracks.length > 0) {
        transcriptionText = `Available caption tracks:\n\n${
          scrapedData.captionTracks.map((track: any) => 
            `- ${track.name || track.languageCode} (${track.languageCode})${track.isAutoGenerated ? ' (Auto-generated)' : ''}`
          ).join('\n')
        }`;
        
        // If the video has captions, but we couldn't extract them directly,
        // try to fetch the first available caption track
        if (!transcriptionText.includes("- ")) {
          try {
            const selectedTrack = scrapedData.captionTracks.find((track: any) => track.isAutoGenerated === useAutoCaption);
            
            if (selectedTrack && selectedTrack.baseUrl) {
              toast.info("Attempting to fetch captions using the first available track...");
              const captionResponse = await fetch(selectedTrack.baseUrl);
              if (captionResponse.ok) {
                const captionsXml = await captionResponse.text();
                transcriptionText = parseXmlCaptions(captionsXml);
              }
            }
          } catch (captionError) {
            console.error("Error fetching captions from track:", captionError);
          }
        }
      } 
      // If no transcription or captions found, try Gemini as fallback
      else {
        toast.info("No transcription found in page, trying Gemini API...");
        setTranscriptionMethod("gemini");
        try {
          const geminiResult = await fetchGeminiTranscription(videoId);
          transcriptionText = typeof geminiResult === 'string' ? geminiResult : geminiResult.transcription;
        } catch (geminiError) {
          console.error("Gemini fallback also failed:", geminiError);
          throw new Error("Could not find or generate any transcription for this video");
        }
      }
      
      setTranscription(transcriptionText);
      setActiveTab("transcription");
      toast.success("Information fetched successfully");
    } catch (error) {
      console.error("Error scraping YouTube page:", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      setError(`Failed to scrape YouTube page: ${errorMessage}. Trying alternative methods...`);
      toast.error("Scraping failed: " + errorMessage);
      
      // Try alternative methods
      await fetchTranscription();
    } finally {
      setLoading(false);
    }
  };

  // Fetch transcription from YouTube video using previous methods
  const fetchTranscription = async () => {
    if (!videoId) return;
    
    setLoading(true);
    setError(null);
    try {
      console.log(`Fetching transcription for video ID: ${videoId}`);
      console.log(`Using ${transcriptionMethod} method, autoCaption: ${useAutoCaption}`);
      
      let transcriptionText = "";
      let captionData = {};
      
      switch (transcriptionMethod) {
        case "nodeBackend":
          try {
            const result = await fetchYoutubeTranscriptionWithNodeBackend(videoId, {
              useAutoCaption,
              serverUrl: nodeServerUrl
            });
            transcriptionText = result.transcription;
            captionData = {
              language: result.language,
              isAutoGenerated: result.isAutoGenerated
            };
          } catch (error) {
            console.error("Node.js backend method failed:", error);
            setTranscriptionMethod("supadata");
            toast.info("Node.js backend method failed, trying supadata method...");
            await fetchTranscriptionWithSupadata();
            return;
          }
          break;
          
        case "supadata":
          try {
            const result = await fetchSupadataTranscription(videoId, { useAutoCaption });
            transcriptionText = result.transcription;
            captionData = {
              language: result.language,
              isAutoGenerated: result.isAutoGenerated
            };
          } catch (error) {
            console.error("Supadata method failed:", error);
            setTranscriptionMethod("scraping");
            toast.info("Supadata method failed, trying scraping method...");
            await fetchTranscriptionWithScraping();
            return;
          }
          break;
          
        case "scraping":
          await fetchTranscriptionWithScraping();
          return;
          
        case "gemini":
          try {
            const result = await fetchGeminiTranscription(videoId);
            transcriptionText = typeof result === 'string' ? result : result.transcription;
          } catch (error) {
            console.error("Gemini method failed:", error);
            // If Gemini fails, try the standard method
            setTranscriptionMethod("standard");
            toast.info("Gemini method failed, trying standard method...");
            try {
              const result = await fetchYoutubeTranscription(videoId, { useAutoCaption });
              transcriptionText = typeof result === 'string' ? result : result.transcription;
              if (typeof result !== 'string') {
                captionData = {
                  language: result.language,
                  isAutoGenerated: result.isAutoGenerated
                };
              }
            } catch (standardError) {
              console.error("Standard method also failed, trying alternative:", standardError);
              setTranscriptionMethod("alternative");
              toast.info("Trying alternative method for captions...");
              try {
                const result = await fetchYoutubeCaptions(videoId, { useAutoCaption });
                transcriptionText = typeof result === 'string' ? result : result.transcription;
                if (typeof result !== 'string') {
                  captionData = {
                    language: result.language,
                    isAutoGenerated: result.isAutoGenerated
                  };
                }
              } catch (altError) {
                console.error("Alternative method also failed, trying API:", altError);
                setTranscriptionMethod("api");
                toast.info("Trying API captions method as last resort...");
                
                const { data, error } = await supabase.functions.invoke("get-youtube-api-captions", {
                  body: { videoId, useAutoCaption }
                });
                
                if (error) throw new Error(`Function error: ${error.message}`);
                
                if (data && data.captions && data.captions.length > 0) {
                  transcriptionText = `Available caption tracks:\n\n${
                    data.captions.map((caption: any) => 
                      `- ${caption.name} (${caption.language})${caption.isAutoGenerated ? ' (Auto-generated)' : ''}`
                    ).join('\n')
                  }`;
                } else {
                  throw new Error("No captions found for this video");
                }
              }
            }
          }
          break;
          
        case "api":
          try {
            console.log("Using API captions method");
            const { data, error } = await supabase.functions.invoke("get-youtube-api-captions", {
              body: { videoId, useAutoCaption }
            });
            
            if (error) throw new Error(`Function error: ${error.message}`);
            
            console.log("Received captions data:", data);
            
            if (data && data.captions && data.captions.length > 0) {
              // For now, just display the captions info since we don't get full transcript
              transcriptionText = `Available caption tracks:\n\n${
                data.captions.map((caption: any) => 
                  `- ${caption.name} (${caption.language})${caption.isAutoGenerated ? ' (Auto-generated)' : ''}`
                ).join('\n')
              }`;
            } else {
              throw new Error("No captions found for this video");
            }
          } catch (apiError) {
            console.error("API captions method failed:", apiError);
            throw apiError;
          }
          break;
          
        case "alternative":
          // Use the alternative captions endpoint
          const altResult = await fetchYoutubeCaptions(videoId, { useAutoCaption });
          transcriptionText = typeof altResult === 'string' ? altResult : altResult.transcription;
          if (typeof altResult !== 'string') {
            captionData = {
              language: altResult.language,
              isAutoGenerated: altResult.isAutoGenerated
            };
          }
          break;
          
        case "standard":
        default:
          // Use the original transcription endpoint
          try {
            const stdResult = await fetchYoutubeTranscription(videoId, { useAutoCaption });
            transcriptionText = typeof stdResult === 'string' ? stdResult : stdResult.transcription;
            if (typeof stdResult !== 'string') {
              captionData = {
                language: stdResult.language,
                isAutoGenerated: stdResult.isAutoGenerated
              };
            }
          } catch (mainError) {
            console.error("Error with main method, trying fallback:", mainError);
            setTranscriptionMethod("alternative");
            toast.info("Trying alternative method to fetch captions...");
            try {
              const fbResult = await fetchYoutubeCaptions(videoId, { useAutoCaption });
              transcriptionText = typeof fbResult === 'string' ? fbResult : fbResult.transcription;
              if (typeof fbResult !== 'string') {
                captionData = {
                  language: fbResult.language,
                  isAutoGenerated: fbResult.isAutoGenerated
                };
              }
            } catch (fallbackError) {
              console.error("Fallback method also failed, trying Gemini:", fallbackError);
              setTranscriptionMethod("gemini");
              toast.info("Trying Gemini AI to extract transcription...");
              try {
                const gmResult = await fetchGeminiTranscription(videoId);
                transcriptionText = typeof gmResult === 'string' ? gmResult : gmResult.transcription;
              } catch (geminiError) {
                console.error("Gemini method also failed, trying API captions:", geminiError);
                setTranscriptionMethod("api");
                toast.info("Trying API captions method as last resort...");
                
                const { data, error } = await supabase.functions.invoke("get-youtube-api-captions", {
                  body: { videoId, useAutoCaption }
                });
                
                if (error) throw new Error(`Function error: ${error.message}`);
                
                if (data && data.captions && data.captions.length > 0) {
                  // For now, just display the captions info since we don't get full transcript
                  transcriptionText = `Available caption tracks:\n\n${
                    data.captions.map((caption: any) => 
                      `- ${caption.name} (${caption.language})${caption.isAutoGenerated ? ' (Auto-generated)' : ''}`
                    ).join('\n')
                  }`;
                } else {
                  throw new Error("No captions found for this video");
                }
              }
            }
          }
          break;
      }
      
      setTranscription(transcriptionText);
      setCaptionInfo(captionData);
      setActiveTab("transcription");
      toast.success("Transcription fetched successfully");
    } catch (error) {
      console.error("Error fetching transcription:", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      setError(`Failed to fetch transcription: ${errorMessage}. Please try another method or video.`);
      toast.error("Failed to fetch transcription: " + errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // Toggle between transcription methods
  const toggleTranscriptionMethod = () => {
    const methods = ["supadata", "scraping", "gemini", "standard", "alternative", "api", "nodeBackend"] as const;
    const currentIndex = methods.indexOf(transcriptionMethod as any);
    const nextIndex = (currentIndex + 1) % methods.length;
    const newMethod = methods[nextIndex] as any;
    
    setTranscriptionMethod(newMethod);
    toast.info(`Using ${newMethod} transcription method`);
  };

  // Analyze transcription to extract historical entities
  const handleAnalyzeTranscription = async () => {
    if (!transcription) {
      toast.error("No transcription to analyze");
      return;
    }
    
    setAnalyzing(true);
    setError(null);
    try {
      console.log(`Analyzing transcription of length: ${transcription.length}`);
      const extractedEntities = await analyzeTranscription(transcription);
      
      if (extractedEntities.length > 0) {
        setEntities(extractedEntities);
        setActiveTab("visualization");
        toast.success(`Analysis complete: ${extractedEntities.length} entities found`);
      } else {
        toast.warning("No significant entities found in the transcription");
        setError("No significant historical entities were found in this transcription.");
      }
    } catch (error) {
      console.error("Error analyzing transcription:", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      setError(`Failed to analyze transcription: ${errorMessage}`);
      toast.error("Failed to analyze transcription: " + errorMessage);
    } finally {
      setAnalyzing(false);
    }
  };

  // Parse XML captions to extract text
  const parseXmlCaptions = (xml: string): string => {
    const textSegments: string[] = [];
    const regex = /<text[^>]*>([\s\S]*?)<\/text>/g;
    let match;
    
    while ((match = regex.exec(xml)) !== null) {
      let text = match[1];
      
      // Replace HTML entities
      text = text.replace(/&amp;/g, '&')
               .replace(/&lt;/g, '<')
               .replace(/&gt;/g, '>')
               .replace(/&quot;/g, '"')
               .replace(/&#39;/g, "'");
      
      if (text.trim()) {
        textSegments.push(text.trim());
      }
    }
    
    return textSegments.join(' ');
  };

  return (
    <MainLayout>
      <div className="container max-w-7xl py-10">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-galaxy-star via-galaxy-nova to-galaxy-blue-giant bg-clip-text text-transparent mb-4">YouTube Video Analysis</h1>
          <p className="text-xl text-foreground/80 max-w-3xl mx-auto">
            Extract historical knowledge and relationships from educational videos.
          </p>
        </div>

        <Separator className="mb-10 bg-gradient-to-r from-galaxy-nova/20 via-galaxy-blue-giant/20 to-aurora-purple/20 h-0.5 rounded-full" />
      
        {/* Error Display */}
        {error && (
          <Alert variant="destructive" className="mb-4 border border-destructive/30 backdrop-blur-sm bg-destructive/10">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        
        {/* URL Input Form */}
        <form onSubmit={handleSubmit} className="mb-6">
          <div className="backdrop-blur-lg bg-black/30 border border-galaxy-nova/30 shadow-xl shadow-galaxy-nova/10 p-6 rounded-lg relative overflow-hidden">
            {/* Glowing Orb Top Right */}
            <div className="absolute top-0 right-0 -m-10 w-40 h-40 bg-galaxy-nova/20 rounded-full blur-2xl pointer-events-none"></div>
            {/* Glowing Orb Bottom Left */}
            <div className="absolute bottom-0 left-0 -m-10 w-40 h-40 bg-galaxy-blue-giant/20 rounded-full blur-2xl pointer-events-none"></div>
            
            <div className="flex gap-2 relative z-10">
              <Input
                type="url"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                placeholder="Enter YouTube URL (e.g., https://www.youtube.com/watch?v=...)"
                className="flex-1 bg-black/50 border-galaxy-nova/30 focus:border-galaxy-nova/60 text-foreground"
                required
              />
              <Button 
                type="submit" 
                disabled={!url}
                className="nebula-button"
              >
                Load Video
              </Button>
            </div>
          </div>
        </form>
        
        {/* Tabs for Video, Transcription, and Visualization */}
        {videoId && (
          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)} className="space-y-4">
            <TabsList className="grid w-full grid-cols-4 bg-black/30 backdrop-blur-sm border border-galaxy-nova/20 p-1 rounded-lg">
              <TabsTrigger 
                value="video"
                className="data-[state=active]:bg-galaxy-nova/20 data-[state=active]:backdrop-blur-md data-[state=active]:text-foreground data-[state=active]:border-galaxy-nova/30 border border-transparent"
              >
                Video
              </TabsTrigger>
              <TabsTrigger 
                value="transcription"
                className="data-[state=active]:bg-galaxy-nova/20 data-[state=active]:backdrop-blur-md data-[state=active]:text-foreground data-[state=active]:border-galaxy-nova/30 border border-transparent"
              >
                Transcription
              </TabsTrigger>
              <TabsTrigger 
                value="visualization"
                className="data-[state=active]:bg-galaxy-nova/20 data-[state=active]:backdrop-blur-md data-[state=active]:text-foreground data-[state=active]:border-galaxy-nova/30 border border-transparent"
              >
                Visualization
              </TabsTrigger>
              <TabsTrigger 
                value="metadata"
                className="data-[state=active]:bg-galaxy-nova/20 data-[state=active]:backdrop-blur-md data-[state=active]:text-foreground data-[state=active]:border-galaxy-nova/30 border border-transparent"
              >
                Metadata
              </TabsTrigger>
            </TabsList>
            
            {/* Video Tab */}
            <TabsContent value="video" className="space-y-4">
              <Card className="bg-gradient-to-br from-background/90 to-background/60 backdrop-blur-sm border border-galaxy-nova/30 shadow-xl shadow-galaxy-nova/10">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-foreground">
                    <Youtube className="h-5 w-5 text-galaxy-nova" /> YouTube Video
                  </CardTitle>
                  <CardDescription className="text-foreground/70">
                    Watch the video and then fetch its transcription for analysis
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div ref={videoContainerRef} className="relative aspect-video w-full overflow-hidden rounded-md border border-galaxy-nova/20">
                    <iframe
                      src={`https://www.youtube.com/embed/${videoId}`}
                      title="YouTube video player"
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                      allowFullScreen
                      className="absolute top-0 left-0 w-full h-full"
                    ></iframe>
                  </div>
                </CardContent>
                <CardFooter className="flex flex-wrap justify-between gap-4">
                  <div className="flex flex-wrap items-center gap-4">
                    <Button 
                      variant="outline" 
                      onClick={() => window.open(`https://www.youtube.com/watch?v=${videoId}`, '_blank')}
                      className="border-galaxy-nova/30 hover:border-galaxy-nova/60 text-foreground/90 hover:text-foreground hover:bg-galaxy-nova/5"
                    >
                      Open in YouTube <ExternalLink className="ml-2 h-4 w-4" />
                    </Button>
                    <Button 
                      variant="outline" 
                      onClick={toggleTranscriptionMethod}
                      className="border-galaxy-nova/30 hover:border-galaxy-nova/60 text-foreground/90 hover:text-foreground hover:bg-galaxy-nova/5"
                    >
                      {`Using ${transcriptionMethod} method`}
                    </Button>
                    
                    <TranscriptionMethodSelector
                      useAutoCaption={useAutoCaption}
                      onToggle={setUseAutoCaption}
                      disabled={loading}
                    />
                  </div>
                  
                  {transcriptionMethod === "nodeBackend" && (
                    <div className="w-full flex flex-col gap-2 mt-2">
                      <div className="text-sm text-foreground/70">Node.js Backend Server URL:</div>
                      <Input
                        type="text"
                        value={nodeServerUrl}
                        onChange={(e) => setNodeServerUrl(e.target.value)}
                        placeholder="Node server URL (e.g., http://localhost:3000)"
                        className="bg-black/50 border-galaxy-nova/30 text-foreground text-sm"
                      />
                    </div>
                  )}
                  
                  <Button 
                    onClick={
                      transcriptionMethod === "scraping" 
                        ? fetchTranscriptionWithScraping 
                        : transcriptionMethod === "supadata" 
                          ? fetchTranscriptionWithSupadata
                          : transcriptionMethod === "nodeBackend"
                            ? fetchTranscriptionWithNodeBackend
                            : fetchTranscription
                    } 
                    disabled={loading}
                    className="nebula-button"
                  >
                    {loading ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Fetching Transcription...
                      </>
                    ) : (
                      <>Fetch Transcription</>
                    )}
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
            
            {/* Transcription Tab */}
            <TabsContent value="transcription" className="space-y-4">
              <Card className="bg-gradient-to-br from-background/90 to-background/60 backdrop-blur-sm border border-galaxy-nova/30 shadow-xl shadow-galaxy-nova/10">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-foreground">
                    <FileText className="h-5 w-5 text-galaxy-nova" /> Video Transcription
                  </CardTitle>
                  <CardDescription className="text-foreground/70">
                    Review and analyze the extracted transcription
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {captionInfo.language && (
                    <Alert className="border border-galaxy-nova/30 bg-galaxy-nova/5 text-foreground/90">
                      <Info className="h-4 w-4" />
                      <AlertDescription>
                        {`Caption information: Language: ${captionInfo.language || 'Unknown'}, ${captionInfo.isAutoGenerated ? 'Auto-generated' : 'Manual'} captions`}
                      </AlertDescription>
                    </Alert>
                  )}
                  
                  <Textarea
                    value={transcription}
                    onChange={(e) => setTranscription(e.target.value)}
                    placeholder="Transcription will appear here..."
                    className="min-h-[300px] bg-black/20 border-galaxy-nova/20 text-foreground resize-y"
                  />
                </CardContent>
                <CardFooter>
                  <Button 
                    onClick={handleAnalyzeTranscription} 
                    disabled={analyzing || !transcription}
                    className="nebula-button"
                  >
                    {analyzing ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Analyzing Transcription...
                      </>
                    ) : (
                      <>Analyze Transcription</>
                    )}
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
            
            {/* Visualization Tab */}
            <TabsContent value="visualization" className="space-y-4">
              <Card className="bg-gradient-to-br from-background/90 to-background/60 backdrop-blur-sm border border-galaxy-nova/30 shadow-xl shadow-galaxy-nova/10">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-foreground">
                    <Info className="h-5 w-5 text-galaxy-nova" /> Knowledge Graph
                  </CardTitle>
                  <CardDescription className="text-foreground/70">
                    Visualize the relationships between entities in the video
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {entities.length > 0 ? (
                    <div className="h-[500px] w-full">
                      <KnowledgeGraph entities={entities} />
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center h-[300px] text-center space-y-4">
                      <AlertTriangle className="h-12 w-12 text-galaxy-nova/40" />
                      <p className="text-xl text-foreground/70">No entities to visualize</p>
                      <p className="text-sm text-foreground/50 max-w-md">
                        Analyze the transcription first to extract historical entities and their relationships.
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
            
            {/* Metadata Tab */}
            <TabsContent value="metadata" className="space-y-4">
              <Card className="bg-gradient-to-br from-background/90 to-background/60 backdrop-blur-sm border border-galaxy-nova/30 shadow-xl shadow-galaxy-nova/10">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-foreground">
                    <Info className="h-5 w-5 text-galaxy-nova" /> Video Metadata
                  </CardTitle>
                  <CardDescription className="text-foreground/70">
                    Additional information about this video
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {videoMetadata ? (
                    <div className="space-y-4">
                      <div>
                        <h3 className="text-lg font-medium text-foreground">Title</h3>
                        <p className="text-foreground/80">{videoMetadata.title || 'Not available'}</p>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-medium text-foreground">Channel</h3>
                        <p className="text-foreground/80">{videoMetadata.channelName || 'Not available'}</p>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-medium text-foreground">Upload Date</h3>
                        <p className="text-foreground/80">{videoMetadata.uploadDate || 'Not available'}</p>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-medium text-foreground">View Count</h3>
                        <p className="text-foreground/80">{videoMetadata.viewCount || 'Not available'}</p>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-medium text-foreground">Description</h3>
                        <Textarea
                          value={videoMetadata.description || 'Not available'}
                          readOnly
                          className="min-h-[200px] bg-black/20 border-galaxy-nova/20 text-foreground resize-y"
                        />
                      </div>
                      
                      {videoMetadata.captionTracks && videoMetadata.captionTracks.length > 0 && (
                        <div>
                          <h3 className="text-lg font-medium text-foreground">Available Caption Tracks</h3>
                          <ul className="list-disc list-inside text-foreground/80">
                            {videoMetadata.captionTracks.map((track: any, index: number) => (
                              <li key={index}>
                                {track.name || track.languageCode} ({track.languageCode})
                                {track.isAutoGenerated ? ' (Auto-generated)' : ''}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center h-[300px] text-center space-y-4">
                      <AlertTriangle className="h-12 w-12 text-galaxy-nova/40" />
                      <p className="text-xl text-foreground/70">No metadata available</p>
                      <p className="text-sm text-foreground/50 max-w-md">
                        Try using the scraping transcription method to fetch video metadata.
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        )}
      </div>
    </MainLayout>
  );
};

export default YouTubeAnalysis;