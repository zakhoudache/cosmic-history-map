
import { YouTubeVideoDetails, TranscriptionResponse, TranscriptionOptions } from "@/types/supabase";
import { supabase } from "@/lib/supabase";

/**
 * Fetches video information from YouTube API
 * @param videoId The YouTube video ID
 */
export const fetchVideoInfo = async (videoId: string): Promise<YouTubeVideoDetails | null> => {
  try {
    // First try to get from Supabase Edge Function
    const { data, error } = await supabase.functions.invoke("fetch-youtube-info", {
      body: { videoId }
    });

    if (error) {
      console.error("Error fetching video info from Supabase:", error);
      throw new Error(error.message);
    }

    if (data && !data.error) {
      return data as YouTubeVideoDetails;
    }

    // Fallback to direct API if needed (which would only work with API key)
    throw new Error("Failed to fetch video info");
  } catch (error) {
    console.error("Error fetching video info:", error);
    return null;
  }
};

/**
 * Fetches video transcript from YouTube using Supabase Edge Function
 * @param videoId The YouTube video ID
 * @param options Options for transcription fetching (auto-captions, language)
 */
export const fetchTranscription = async (
  videoId: string,
  options: TranscriptionOptions = { useAutoCaption: false }
): Promise<TranscriptionResponse> => {
  try {
    // First try to get from Supadata API
    const supadata = await fetchSupadataTranscription(videoId, options);
    if (supadata && supadata.transcription) {
      return supadata;
    }

    // Fallback to Supabase Edge Function
    const { data, error } = await supabase.functions.invoke("fetch-youtube-captions", {
      body: { 
        videoId,
        useAutoCaption: options.useAutoCaption 
      }
    });

    if (error) {
      console.error("Error fetching transcription from Supabase:", error);
      // If Supabase fails, try the web scraping approach
      return await scrapeYouTubeTranscription(videoId, options);
    }

    if (data && !data.error) {
      return data as TranscriptionResponse;
    }

    // If API-based methods fail, try web scraping
    return await scrapeYouTubeTranscription(videoId, options);
  } catch (error) {
    console.error("Error fetching transcription:", error);
    
    // Last resort: try web scraping
    return await scrapeYouTubeTranscription(videoId, options);
  }
};

/**
 * Fetches transcription using Supadata API
 * @param videoId The YouTube video ID
 * @param options Options for transcription fetching
 */
const fetchSupadataTranscription = async (
  videoId: string,
  options: TranscriptionOptions = { useAutoCaption: false }
): Promise<TranscriptionResponse> => {
  try {
    const { data, error } = await supabase.functions.invoke("supadata-youtube-transcription", {
      body: { 
        videoId,
        useAutoCaption: options.useAutoCaption 
      }
    });

    if (error) {
      console.error("Error fetching Supadata transcription:", error);
      throw new Error(error.message);
    }

    if (data && data.transcription) {
      return data as TranscriptionResponse;
    }

    throw new Error("No transcription data returned from Supadata");
  } catch (error) {
    console.error("Supadata transcription error:", error);
    return {
      transcription: "",
      error: `Failed to get Supadata transcription: ${error}`
    };
  }
};

/**
 * Scrapes YouTube page to extract transcription as fallback method
 * @param videoId The YouTube video ID
 * @param options Options for transcription fetching
 */
const scrapeYouTubeTranscription = async (
  videoId: string,
  options: TranscriptionOptions = { useAutoCaption: false }
): Promise<TranscriptionResponse> => {
  try {
    const { data, error } = await supabase.functions.invoke("scrape-youtube-page", {
      body: { 
        videoId,
        useAutoCaption: options.useAutoCaption 
      }
    });

    if (error) {
      console.error("Error scraping YouTube page:", error);
      throw new Error(error.message);
    }

    if (data && typeof data === 'object' && 'transcription' in data) {
      return data as TranscriptionResponse;
    }

    if (typeof data === 'string') {
      // Handle old format for backward compatibility
      return {
        transcription: data,
        language: "unknown",
        isAutoGenerated: options.useAutoCaption
      };
    }

    throw new Error("No transcription data found");
  } catch (error) {
    console.error("YouTube scraping error:", error);
    return {
      transcription: "",
      error: `Failed to scrape YouTube page: ${error}`
    };
  }
};

/**
 * Analyzes YouTube video content using AI
 * @param videoId The YouTube video ID
 * @param transcript The video transcript
 */
export const analyzeYouTubeContent = async (videoId: string, transcript: string) => {
  try {
    const { data, error } = await supabase.functions.invoke("analyze-youtube-content", {
      body: {
        videoId,
        transcript
      }
    });

    if (error) {
      console.error("Error analyzing YouTube content:", error);
      throw new Error(error.message);
    }

    return data;
  } catch (error) {
    console.error("YouTube analysis error:", error);
    throw error;
  }
};
