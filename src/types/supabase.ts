
// Supabase related types

export interface SupabaseUser {
  id: string;
  email?: string;
  username?: string;
  avatar_url?: string;
  created_at?: string;
}

export interface HistoricalRelation {
  targetId: string;
  type: string;
  strength: number;
  // Additional properties can be defined here
}

export interface FormattedHistoricalEntity {
  id: string;
  name: string;
  type: string;
  startDate?: string;
  endDate?: string;
  description: string;
  significance?: number;
  location?: string;
  group?: string;
  imageUrl?: string;
  source?: string;
  url?: string;
  tags?: string[];
  metadata?: Record<string, unknown>;
  relations: HistoricalRelation[];
  // Additional properties
  color?: string;
  index?: number;
}

// Types for the YouTube API responses
export interface YouTubeVideoDetails {
  id: string;
  title: string;
  description: string;
  publishedAt: string;
  channelId: string;
  channelTitle: string;
  thumbnails: {
    default: { url: string, width: number, height: number };
    medium: { url: string, width: number, height: number };
    high: { url: string, width: number, height: number };
  };
  tags: string[];
  duration: string;
  viewCount: string;
  likeCount: string;
  commentCount: string;
}

export interface TranscriptionResponse {
  transcription: string;
  language?: string;
  isAutoGenerated?: boolean;
  error?: string;
}

export interface TranscriptionOptions {
  useAutoCaption?: boolean;
  preferredLanguage?: string;
}

// Historical data service types
export interface HistoricalDataResponse {
  entities: FormattedHistoricalEntity[];
  summary?: string;
  themes?: string[];
  timeline?: {
    startDate: string;
    endDate: string;
    periods: {
      name: string;
      startDate: string;
      endDate: string;
      description: string;
    }[];
  };
  error?: string;
}

// Map visualization types
export interface HistoricalLocation {
  id: string;
  name: string;
  latitude: number;
  longitude: number;
  type: string;
  startDate?: string;
  endDate?: string;
  description?: string;
  entities: string[]; // IDs of related entities
}

export interface HistoricalRoute {
  id: string;
  name: string;
  points: [number, number][];
  type: string;
  startDate?: string;
  endDate?: string;
  description?: string;
  entities: string[]; // IDs of related entities
}

export interface HistoricalArea {
  id: string;
  name: string;
  geometry: GeoJSON.Polygon | GeoJSON.MultiPolygon;
  type: string;
  startDate?: string;
  endDate?: string;
  description?: string;
  entities: string[]; // IDs of related entities
}

export interface HistoricalMap {
  locations: HistoricalLocation[];
  routes: HistoricalRoute[];
  areas: HistoricalArea[];
  timeline?: {
    startDate: string;
    endDate: string;
  };
}

// Knowledge graph types
export interface KnowledgeGraphNode {
  id: string;
  label: string;
  type: string;
  properties?: Record<string, any>;
  x?: number;
  y?: number;
}

export interface KnowledgeGraphEdge {
  source: string;
  target: string;
  label?: string;
  type?: string;
  properties?: Record<string, any>;
}

export interface KnowledgeGraph {
  nodes: KnowledgeGraphNode[];
  edges: KnowledgeGraphEdge[];
}

// YouTube analysis types
export interface YouTubeAnalysisResponse {
  entities: FormattedHistoricalEntity[];
  summary: string;
  themes: string[];
  sentiment: {
    overall: string;
    score: number;
    aspects: {
      name: string;
      sentiment: string;
      score: number;
    }[];
  };
  keyPoints: {
    text: string;
    timestamp: string;
  }[];
  factCheck?: {
    claims: {
      text: string;
      assessment: 'verified' | 'likely true' | 'uncertain' | 'disputed' | 'false';
      confidence: number;
      context?: string;
    }[];
  };
  error?: string;
}
