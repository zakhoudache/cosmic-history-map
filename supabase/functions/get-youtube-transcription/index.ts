
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const API_KEY = Deno.env.get("YOUTUBE_API_KEY"); // Secure API key
const cache = new Map<string, any>(); // In-memory cache

// CORS headers for browser compatibility
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// Function to fetch captions from YouTube API
async function fetchCaptions(videoId: string) {
  const cacheKey = `captions-${videoId}`;
  if (cache.has(cacheKey)) {
    console.log("üìå Serving from cache:", videoId);
    return cache.get(cacheKey);
  }

  const url = `https://www.googleapis.com/youtube/v3/captions?videoId=${videoId}&key=${API_KEY}&part=snippet`;

  try {
    const response = await fetch(url);
    if (!response.ok) throw new Error(`YouTube API Error: ${response.status}`);

    const data = await response.json();
    cache.set(cacheKey, data); // Store response in cache
    return data;
  } catch (error) {
    console.error("‚ùå Error fetching captions:", error);
    throw error;
  }
}

// Function to fetch transcript using captions ID
async function fetchTranscript(captionId: string) {
  const cacheKey = `transcript-${captionId}`;
  if (cache.has(cacheKey)) {
    console.log("üìå Serving transcript from cache:", captionId);
    return cache.get(cacheKey);
  }

  const url = `https://www.googleapis.com/youtube/v3/captions/${captionId}?key=${API_KEY}`;
  
  try {
    const response = await fetch(url);
    if (!response.ok) throw new Error(`YouTube API Error: ${response.status}`);

    const data = await response.text();
    cache.set(cacheKey, data); // Store transcript in cache
    return data;
  } catch (error) {
    console.error("‚ùå Error fetching transcript:", error);
    throw error;
  }
}

// Main API handler
serve(async (req: Request) => {
  // Handle CORS preflight
  if (req.method === "OPTIONS") {
    return new Response(null, {
      headers: corsHeaders,
      status: 204,
    });
  }

  if (req.method !== "POST") {
    return new Response(JSON.stringify({ error: "Method not allowed" }), { 
      status: 405,
      headers: { ...corsHeaders, "Content-Type": "application/json" }
    });
  }

  try {
    const body = await req.json();
    const { videoId } = body;
    
    if (!videoId) {
      return new Response(JSON.stringify({ error: "Missing videoId" }), { 
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      });
    }

    console.log("üì• Fetching captions for video:", videoId);
    const captionData = await fetchCaptions(videoId);

    if (!captionData.items?.length) {
      return new Response(JSON.stringify({ error: "No captions available" }), {
        status: 404,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    // Extract captions
    const captions = captionData.items.map((item: any) => ({
      id: item.id,
      language: item.snippet.language,
      autoGenerated: item.snippet.trackKind === "ASR",
    }));

    // If a valid caption exists, fetch transcript
    let transcription = "";
    if (captions.length > 0) {
      console.log("üì• Fetching transcript for:", captions[0].id);
      transcription = await fetchTranscript(captions[0].id);
    }

    return new Response(JSON.stringify({ captions, transcription }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200
    });
  } catch (error) {
    console.error("‚ùå Error processing request:", error);
    return new Response(JSON.stringify({ error: error.message }), { 
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" }
    });
  }
});
