
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const API_KEY = Deno.env.get("YOUTUBE_API_KEY"); // Secure API key
const API_URL = "https://www.googleapis.com/youtube/v3/captions";
const cache = new Map(); // Simple in-memory cache

// CORS headers for browser compatibility
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// Main handler function
serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { 
      headers: corsHeaders,
      status: 204 
    });
  }
  
  if (req.method !== "POST") {
    return new Response(JSON.stringify({ error: "Method not allowed" }), {
      status: 405,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }

  try {
    // Parse request
    const { videoId } = await req.json();
    
    if (!videoId) {
      return new Response(JSON.stringify({ error: "Video ID is required" }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    // Check cache
    if (cache.has(videoId)) {
      console.log(`Serving captions from cache for video ID: ${videoId}`);
      return new Response(JSON.stringify(cache.get(videoId)), {
        status: 200,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    console.log(`Fetching captions for video ID: ${videoId}`);
    
    if (!API_KEY) {
      throw new Error("YouTube API key is not configured");
    }
    
    const response = await fetch(`${API_URL}?videoId=${videoId}&key=${API_KEY}&part=snippet`);
    
    if (!response.ok) {
      const errorBody = await response.text(); // Get the response body for more details
      throw new Error(`YouTube API error: ${response.statusText} - ${errorBody}`);
    }

    const data = await response.json();
    
    if (!data.items || data.items.length === 0) {
      return new Response(JSON.stringify({ error: "No captions found" }), {
        status: 404,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    // Extract caption information
    const captions = data.items.map((item) => ({
      id: item.id,
      name: item.snippet.name || "Unknown",
      language: item.snippet.language,
      isAutoGenerated: item.snippet.trackKind === "ASR",
    }));

    const result = { captions };
    
    // Store in cache
    cache.set(videoId, result);

    return new Response(JSON.stringify(result), {
      status: 200,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error:", error.message);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});
